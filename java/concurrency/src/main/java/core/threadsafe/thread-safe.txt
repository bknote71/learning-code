thread-safe
- 공유되고 변경할 수 있는 상태에 대한 접근을 관리/조율하는 것이다.
- 스레드가 하나 이상 상태 변수에 접근하고 그 중 하나라도 변수에 값을 쓰면, 해당 변수에 접근할 때 관련된 모든 스레드가 동기화를 통해 조율해야 한다.
- 자바에서 제공하는 동기화 기본 수단은 synchronized, volatile 변수, 명시적 락, 단일 연산 변수(atomic variable) 등이 있다.

thread-safe 한 프로그램을 만드는 방식
1. 해당 상태 변수를 스레드 간에 공유하지 않거나
2. 해당 상태 변수를 변경할 수 없도록 만들거나
3. 해당 상태 변수에 접근할 땐 언제나 동기화를 사용한다.

여러 스레드가 클래스에 접근할 때 계속 정확하게 동작하면 해당 클래스는 스레드에 안전하다.
어떻게 스케쥴하든 어디에 끼워 넣든, 호출하는 쪽에서 추가적인 동기화나 다른 조율 없이도 정확하게 동작하면 해당 클래스는 스레드 안전하다고 말한다.
또한 스레드 안전한 클래스는 클라이언트 쪽에서 별도로 동기화할 필요가 없도록 동기화 기능도 캡슐화한다.
==> thread-safe: "불변 조건을 만족한다"

thread-unsafe 한 상황, 왜 동기화를 사용해야할까?
- race condition, visibility, ..

race condition: 경쟁 조건
- 여러 스레드가 변경가능한 공유 변수에 동시적으로 접근할 때 발생
- 형태: check and act, 읽고 수정하기(쓰기), 불변 조건과 관련 있는 변수들의 연산
==> "복합 동작"

결국에 thread-safe을 만족하기 위해서는 위와 같은 복합 동작을 하나의 "단일 연산"으로 동기화해야 한다.
- java.util.concurrent.atomic 패키지: 숫자나 객체 참조 값에 대해 상태를 단일 연산으로 변경할 수 있도록 단일 연산 변수(atomic variable) 클래스가 준비돼 있다

thread-safe한 단일 연산 여러개를 합쳐 구성, 실행하면 이 또한 "복합 동작"이 된다.
- 이 복합 동작 또한 단일 연산으로 갱신해야 한다.
- 즉 모든 복합 동작을 단일 연산으로 갱신해야 한다.

==>
상태를 일관성있게 유지하려면, thread-safe을 만족시키려면?
"race condition이 발생할 수 있는 관련 있는 변수들의 복합 동작"들을 하나의 단일 연산으로 갱신해야 한다.

동기화를 통해 복합 동작을 하나의 단일 연산으로 갱신했다 하더라도 여전히 문제는 존재한다.

락으로 상태를 보호할 때'
1. 특정 변수에 대한 접근을 조율하기 위해 동기화할 때는 해당 변수에 접근하는 모든 부분을 동기화해야 한다.
- 해당 변수에 접근하는 거의 모든 부분을 동기화하였지만 한 곳에서 동기화하지 못한다면 결국 동기화가 깨지게 된다.
- 한 곳에서라도 공유 변수에 대하여 동기화하지 못하면 그 공유 변수를 동기화하는 전체 부분에서 동기화가 깨진다.

2. 또한 해당 변수에 접근하는 모든 곳에서 반드시 같은 락을 사용해야 한다.
- 다른 락을 사용한다면 변경 가능한 공유 변수에 동시에 접근이 가능해진다!
- 즉 동기화가 깨진다.

3. 여러 변수에 대한 불변조건이 있으면 해당 변수들은 모두 같은 락으로 보호해야 한다.
- 여러 상태 변수가 하나의 불변 조건에 묶여 있다면, 하나의 변수라도 동기화가 깨지게 된다면 전체 동기화가 깨질 수 있다.
- 복합적인 1, 2 조건

락에 대한 규칙은 새로운 메서드나 코드 경로를 추가하면서 실수로 동기화하는 걸 잊기만 해도 쉽게 무너질 수 있다.
- 그렇기 때문에 문서화가 중요하다

synchronized
- 락을 제공 (명시적인 락, 암시적인 락, "mutex"로 동작)
- 재진입성(reentrant) 특성: 이미 락을 확보한 스레드는 계속 synchronized 블럭을 통과할 수 있다.

활동성과 성능:
1. synchronized 블럭을 너무 잘게 쪼개는 것: 락을 얻고 놓는 작업만으로도 오버헤드가 발생하기 때문에 바람직하지 않다.
2. 너무 크게 락을 잡는 것: 계산량이 많은 작업을 하거나 잠재적으로 대기 상태에 들어갈 수 있는 작업을 하느라 락을 오래 잡고 있으면 활동성이나 성능 문제를 야기할 수 있다.
==>
- 락을 사용할 땐 블록 안의 코드가 무엇을 하는지, 수행하는 데 얼마나 걸릴지를 파악해야 한다.
- 복잡하고 오래 걸리는 계산 작업, 네트웍 작업, 사용자 입출력 작업과 같이 빨리 끝나지 않을 수 있는 작업 부분에서는 가능한 락을 잡지 말아라

객체를 안전하게 공유하기
- 여러 스레드를 동시에 사용하는 병렬 프로그래밍에서 객체를 공유해 사용하고자 할 때 가장 많이 사용되는 몇 가지 원칙을 살펴보면 다음과 같다.

1. 스레드 한정: 스레드에 한정된 객체는 완전하게 해당 스레드 내부에 존재하면서도 그 스레드에서만 호출해 사용할 수 있다
2. 읽기 전용 객체를 공유: 읽기 전용 객체를 공유해 사용하면 동기화 작업을 하지 않더라도 여러 스레드에서 언제든지 마음껏 읽어 사용할 수 있다
3. 스레드에 안전한 객체를 공유: 스레드에 안전한 객체는 객체 내부적으로 필수적인 동기화 기능이 만들어져 있기 때문에 외부에서 동기화를 신경 쓸 필요 없이 여러 스레드에서 마음껏 호출해 사용할 수 있다
4. 동기화 방법 적용: 특정 객체에 동기화 방법을 적용해두면 지정한 락을 획득하기 전에는 해당 객체를 사용할 수 없다