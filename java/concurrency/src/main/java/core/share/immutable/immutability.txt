# 불변 객체
- 맨 처음 생성되는 시점을 제외하고는 그 값이 전혀 바뀌지 않는 객체이다.
- 생성 메서드를 제외하고 상태를 바꿀 수 없다.
==> 불변 객체는 언제라도 스레드 안전하다.

객체 내부의 값을 마음대로 변경할 수 있고 를제 3자가 만든 코드에 넘겨주거나 외부의 라이브러리가 볼 수 있는 범위에 공개되어 있다면
--> 굉장히 위험한 상태이다.
반대로 불변 객체는 제 3자가 만들어 검증되지 않고 오류가 많거나 심지어는 악의를 갖고 만든 악성 코드가 가져다 사용한다 해도 값을 변경할 수 없으므로 매우 안전하다.

불변 객체의 조건 3가지
1. 생성되고 난 이후에는 객체의 상태를 변경할 수 없다.
2. 내부의 모든 변수는 "final"로 설정돼야 한다.
3. 적절한 방법으로 생성돼야 한다.
- this 변수에 대한 참조가 외부로 유출되지 않아야 한다.
- 생성자에서 inner thread class를 이용하는 코드는 완성되지 않은 상태에 접근할 수 있다.
- 즉 호출한 클래스나 생성 메서드 이외의 부분에서 참조를 가져갈 수 있는 일이 없어야 한다.

final:
- 프리미티브 타입에서는 불변, 객체 참조에서는 참조 불변!

불변 객체 vs 참조 불변?
- final "내부_객체" 의 존재
- 참조 불변이다.
- 내부_객체의 내부의 상태는 변경될 수 있다.
- 만약 내부_객체의 상태를 변경할 수 있는 메서드를 모두 막았다고 해서 불변 객체가 되는 것은 아니다.

why?
- reflection을 이용해서 private인 필드에 접근할 수는 있다.
- Field field = getDeclaredField("field_name");
- field.setAccessible(true);
- field.get(object);
- 해당 object의 내부_객체를 가져올 수 있고, 내부_객체의 내부 상태를 변경할 수 있다.

완전한 불변 객체
1. 특정 객체가 완전한 불변 객체가 되려면 객체안의 참조하는 내부_객체또한 불변이어야 한다.
2. 만약 내부_객체의 상태를 변경해야하는 목적이 있으면 상태를 변경하지말고 새로운 객체를 생성해서 반환해줘라!
==> 변경할 때마다 복사
==>  기존에 변수 값이 변경되기 전의 불변 객체를 사용하는 다른 스레드는 아무런 이상 없이 계속 동작한다.

참고:
- 프리미티브 래퍼 타입의 연산 결과는 무조건 다른 객체가 반환되서 스레드 안전하다.
- 프리미티브 래퍼 타입이 아닌 래퍼런스만 새로 반환하면 된다.
- 아니면 해당 래퍼런스를 완전히 불변으로 만들던가.

final
- 외부에서 반드시 사용할 일이 없는 변수는 private 으로 선언하는 게 괜찮은 방법인 만큼
- 나중에 변경할 일이 없다고 판단되는 변수는 final 로 선언해두는 것도 좋은 방법이다.
- 일반적인 경우 final이 안전성을 보장한다.





