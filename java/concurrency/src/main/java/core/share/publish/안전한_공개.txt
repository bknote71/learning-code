안전한 공개
- 특정 객체를 외부에 공개해야 할 때 어떻게 공개해야 안전할까?

특정 객체에 대한 참조를 클래스 외부에서 볼 수 있다 해도 외부 스레드 입장에서 항상 정상적인 참조 값을 사용한다는 보장이 없다.
외부 스레드에서 항상 정상적인 값을 참조하려면 동기화 방법이 필요하다.

반면에 불변 객체를 사용하면 객체의 참조를 외부에 공개할 때 추가적인 동기화 방법을 사용하지 않았다 해도 항상 안전하게 올바른 참조 값을 사용할 수 있다.

불변 객체는 별다른 동기화 방법을 적용하지 않았다 해도 어느 스레드에서건 마음껏 안전하게 사용할 수 있다.
불변 객체를 공개하는 부분에 동기화 처리를 하지 않았다 해도 아무런 문제가 없다.

안전한 공개 방법의 특성
- 불변 객체가 아닌 객체는 모두 올바른 방법으로 안전하게 공개해야 하며,
- 대부분은 공개하는 스레드와 불러다 사용하는 스레드 양쪽 모두에 동기화 방법을 적용해야 한다.
- 안전한 공개 방법 = 동기화를 이용

객체를 안전하게 공개하려면 해당 객체에 대한 참조와 객체 내부의 상태를 외부의 스레드에게 동시에 볼 수 있어야 한다.
올바르게 생성 메서드가 실행되고 난 객체는 다음과 같은 방법으로 안전하게 공개할 수 있다.

1. 객체에 대한 참조를 static 메서드에서 초기화한다
2. 객체에 대한 참조를 volatile 변수 또는 AtomicReference 클래스에 보관한다
3. 객체에 대한 참조를 올바르게 생성된 클래스 내부의 final 변수에 보관한다
4. 락을 사용해 올바르게 막혀 있는 변수에 객체에 대한 참조를 보관한다
==> AtomicReference, final, static final, lock을 사용한 동기화

# 자바에서 기본으로 제공하는 스레드 안전한 컬렉션
- 내부적으로 스레드 동기화 기능을 갖고 있다.

- HashTable, ConcurrentMap, synchronizedMap 을 사용해 만든 Map 객체
- 그 안에 보관하고 있는 키와 값 모두를 어느 스레드에서라도 항상 안전하게 사용할 수 있다.

- 객체를 Vector, CopyOnWriteArrayList, CopyOnWriteArraySet 이나 synchronizedList 또는 synchronizedSet 메서드로 만든 컬렉션
- 그 안에 보관하고 있는 객체를 어느 스레드에서라도 항상 안전하게 사용할 수 있다.

- BlockingQueue 나 ConcurrentLinkedQueue 컬렉션에 들어 있는 객체는 어느 스레드라도 항상 안전하게 사용할 수 있다.

# static variable 의 안전한 공개
1. public static final Holder holder = new Holder(42);
2. static 블럭 초기화

# 결과적으로 불변인 객체
- 특정 객체를 안전한 방법으로 공개했을 경우,
- 해당 객체에 대한 참조를 갖고 객체를 불러와 사용하는 시점에는 공개하는 시점의 객체 상태를 정확하게 사용할 수 있고,
- 해당 객체 내부의 값이 바뀌지 않는 한 여러 스레드에서 동시에 값을 가져다 사용해도 동기화 문제가 발생하지 않는다.
==> 특정 객체를 안전한 방법으로 공개하면 결과적으로 불변인 객체이다!
예) 스레드 안전한 컬렉션 사용(안전한 방법의 공개 중 하나)
public Map<String, Date> lastLogin
                    = Collections.synchronizedMap(new HashMap<String, Date>());

# 가변 객체
- 가변 객체(mutable object)를 사용할 때에는 공개하는 부분과 가변 객체를 사용하는 모든 부분에서 동기화 코드를 작성해야만 한다
- 그래야 객체 내용이 바뀌는 상황을 정확하게 인식하고 사용할 수 있다.
- 가변 객체를 안전하게 사용하려면 안전하게 공개해야만 하고, 또한 동기화와 락을 사용해 스레드 안전성을 확보해야만 한다.

[정리]
가변성에 따라 객체를 공개할 때 필요한 점을 살펴보면 다음과 같다.

1. 불변 객체는 어떤 방법으로 공개해도 아무런 문제가 없다.
2. 결과적으로 불변인 객체는 안전하게 공개해야 한다.
- 자바에서 제공하는 스레드 안전한 컬렉션, final, static final, lock, atomicReference
3. 가변 객체는 안전하게 공개해야 하고, 스레드에 안전하게 만들거나 락으로 동기화 시켜야 한다

객체를 안전하게 공유하기
- 여러 스레드를 동시에 사용하는 병렬 프로그래밍에서 객체를 공유해 사용하고자 할 때 가장 많이 사용되는 몇 가지 원칙을 살펴보면 다음과 같다.

1. 스레드 한정: 스레드에 한정된 객체는 완전하게 해당 스레드 내부에 존재하면서도 그 스레드에서만 호출해 사용할 수 있다
2. 읽기 전용 객체를 공유: 읽기 전용 객체를 공유해 사용하면 동기화 작업을 하지 않더라도 여러 스레드에서 언제든지 마음껏 읽어 사용할 수 있다
3. 스레드에 안전한 객체를 공유: 스레드에 안전한 객체는 객체 내부적으로 필수적인 동기화 기능이 만들어져 있기 때문에 외부에서 동기화를 신경 쓸 필요 없이 여러 스레드에서 마음껏 호출해 사용할 수 있다
4. 동기화 방법 적용: 특정 객체에 동기화 방법을 적용해두면 지정한 락을 획득하기 전에는 해당 객체를 사용할 수 없다

