특정 객체를 현재 코드의 스코프 범위 밖에서 사용할 수 있도록 만들면 공개(published)되었다고 한다.
만약 클래스 내부의 상태 변수를 외부에 공개해야 한다면 객체 캡슐화 작업이 물거품이 되거나 내부 데이터의 안정성을 해칠 수 있다.
따라서 객체가 안정적이지 않은 상태에서 공개하면 스레드 안정성에 문제가 생길 수 있다.
이처럼 의도적으로 공개시키지 않았지만 외부에서 사용할 수 있게 공개된 경우를 유출 상태(escaped)라고 한다.

==>
- 의도치 않은 공개(published) = 유출(escaped)
- 객체를 캡슐화된 코드 범위 밖에서 사용되면 안전성을 해칠 수 있다.
- 동시에 동작하는 여러 스레드에 의해 접근될 수 있다.

1. public static variable
2. public method return instance;

객체를 공개했을 때 그 객체 내부의 private 아닌 변수나 메서드를 통해 불러올 수 있는 모든 객체는 함께 공개된다는 점을 알아두자.
어떤 객체건 일단 유출되고 나면 다른 스레드가 유출된 클래스를 의도적이던 의도적이디 않건 간에 반드시 잘못 사용할 수 있다고 가정해야 한다.
==> 객체가 유출되는 상황에서 어려운 문제점을 겪을 수도 있기 때문에 객체 내부는 캡슐화 해야 한다는 것이다.

객체나 객체 내부의 상태 값이 외부에 공개되는 또 다른 예
- 내부 클래스의 인스턴스를 외부에 공개하는 경우다. (inner class, not static)
- 내부 클래스는 항상 부모/외부 클래스에 대한 참조를 갖고 있기 때문에 내부 클래스 객체를 외부에 공개하면 그 부모/외부 클래스도 외부에 함께 공개된다.

# 생성 메서드 안전성
일반적으로 생성 메서드가 완전히 종료하고 난 이후가 되어야 객체의 상태가 개발자가 예상한 상태로 초기화되기 때문에
생성 메서드가 실행되는 도중에 해당 객체를 외부에 공개한다면 정상적이지 않은 상태의 객체를 외부에서 불러 사용할 가능성이 있다.
==> 미완성된, 유효하지 않은 객체의 상태를 사용하게 된다.

생성 메서드가 실행 도중에 this 변수가 외부에 공개된다면, 이론적으로 해당 객체는 정상적으로 생성되지 않았다고 말할 수 있다.
==> 생성 메서드를 실행하는 도중에는 this 변수가 외부에 유출되지 않게 해야 한다.

생성 메서드에서 this 변수를 유출시키는 가장 흔한 오류는 생성 메서드에서 스레드를 새로 만들어 시작시키는 경우다.
생성 메서드에서 또다른 스레드를 만들어 내면 대부분의 경우에는 생성 메서드에의 클래스와 새로운 스레드가 this 변수를 직접 공유하거나 자동으로 공유되기도 한다.
예를 들어 생성 메서드에서 만든 스레드의 클래스가 원래 클래스의 내부 클래스라면 자동으로 원래 클래스의 this 변수를 공유하는 상태가 된다.
그러면 새로 만들어져 실행된 스레드에서 원래 클래스의 생성 메서드가 끝나기도 전에 원래 클래스에 정의되어 있는 여러 가지 변수를 직접 사용할 수 있게 된다.

==> 이렇게 되면 결국 원래 의도와는 다르게 초기화될 수 있는 위험이 있다.
==> 스레드를 생성하면서 바로 시작시키기보다는 스레드를 시작시키는 기능을 start 나 initialize 등으 메서드로 만들어 사용하는 편이 좋다.
==> 내부적으로 생성 메서드를 실행하여 완료한 후에 스레드 시작
public static SafeListener newInstance(EventSource source) {
		SafeListener safe = new SafeListener();
		source.registerListener(safe.listener);
		return safe;
}

this 유출에 대한 정리
1. inner class (non static)를 외부에 노출시켜서는 안된다.
- inner class 는 outer 클래스의 참조를 가지고 있기 때문이다.

2. 생성자에서 this가 유출되면 안된다.
- outer 클래스를 참조하는 thread(inner class thread)를 생성자에서 실행하지 말라는 것이다.
- static inner class thread는 outer 클래스를 참조하지 않는다.





